-----
-- User configuration file for lsyncd.
--
--
 
settings {
        statusFile = "/tmp/lsyncd.stat",
        nodaemon = false,
        insist = true,
}

aws_s3_cmd = "aws --cli-read-timeout $AWS_CLI_READ_TIMEOUT --cli-connect-timeout $AWS_CLI_CONNECT_TIMEOUT s3 "
log_info_cmd = "logger -i -t awscli -p user.info "
log_warn_cmd = "logger -i -t awscli -p user.warn "
log_error_cmd = "logger -i -t awscli -p user.error "

startup = function(event)
  local runcmd = log_info_cmd .. event.etype .. " " .. event.source
  spawnShell(event, runcmd)
end

runShell = function(event, src_path, s3cmd, remove)
  local log_result_cmd = log_info_cmd .. event.etype .. " $S3_OUTPUT"
  local log_retry_cmd = log_warn_cmd .. event.etype .. " Return Code: $rc, retrying... caused by: $S3_OUTPUT"
  local log_failed_cmd = log_error_cmd .. event.etype .. " command failed: '" .. string.gsub(s3cmd, "'", "\"") .. "'"

  local condition = "[ -f '" .. src_path .. "' ]"
  local msg = " file not found "
  if (remove) then
    condition = "[ ! -f '" .. src_path .. "' ]"
    msg = " file found: "
  end

  local log_file_error_cmd = log_error_cmd .. event.etype .. msg .. src_path

  local runcmd = "rc=0; if " .. condition .. "; then for i in $(seq 0 ${AWS_CLI_RETRY}); do S3_OUTPUT=`" .. s3cmd .. " 2>&1`; rc=$?; if [ $rc -eq 0 ]; then " .. log_result_cmd .. "; break; elif [ $i -eq ${AWS_CLI_RETRY} ]; then " .. log_failed_cmd .. "; else " .. log_retry_cmd .. "; fi; done; else " .. log_file_error_cmd .. "; fi; :"

  spawnShell(event, runcmd)
end

cp = function(event)
  local src_path = event.sourcePathname
  local dst_path = event.targetPathname

  if (string.sub(event.source, -1, -1) == "/") then
      src_path = string.sub(event.source, 1, -2) .. event.pathname
  end
  if (string.sub(event.target, -1, -1) == "/") then
      dst_path = string.sub(event.target, 1, -2) .. event.pathname
  end

  local s3cmd = aws_s3_cmd .. "cp '" .. src_path .. "' '" .. dst_path .. "'"

  runShell(event, src_path, s3cmd, false)
end

rm = function(event)
  local src_path = event.sourcePathname
  local dst_path = event.targetPathname

  if (string.sub(event.source, -1, -1) == "/") then
      src_path = string.sub(event.source, 1, -2) .. event.pathname
  end
  if (string.sub(event.target, -1, -1) == "/") then
      dst_path = string.sub(event.target, 1, -2) .. event.pathname
  end

  local s3cmd = aws_s3_cmd .. "rm '" .. dst_path .. "'"

  runShell(event, src_path, s3cmd, true)
end

mv = function(oEvent, dEvent)
  local src_path = oEvent.targetPathname
  local dst_path = dEvent.targetPathname

  if (string.sub(oEvent.target, -1, -1) == "/") then
      src_path = string.sub(oEvent.target, 1, -2) .. oEvent.pathname
  end
  if (string.sub(dEvent.target, -1, -1) == "/") then
      dst_path = string.sub(dEvent.target, 1, -2) .. dEvent.pathname
  end

  local s3cmd = aws_s3_cmd .. "mv '" .. src_path .. "' '" .. dst_path .. "'"

  runShell(oEvent, src_path, s3cmd, true)
end

 
s3 = {
        maxProcesses = @LSYNCD_MAX_PROCESSES@,
        onStartup = startup,
        onCreate = cp,
        onModify = cp,
        onDelete = rm,
        onMove = mv,
}
 
sync{s3, source="/home", target="s3://@AWS_S3_BUCKET@/@AWS_S3_PREFIX@"}

